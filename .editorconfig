# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
root = true

[*]
charset = utf-8

# YAML/csproj Files
[*.{yml,yaml,csproj,props,targets}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false

[*.{cs,js,tsx}]
indent_size = 4
indent_style = space
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf

[*.cs]
# Indentation options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#indent
csharp_indent_case_contents = true
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_switch_labels = true


# New line preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#c-formatting-settings
csharp_new_line_before_open_brace = all

# Organize usings
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#usings

dotnet_sort_system_directives_first = true


# Expression-level preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#expression_level

dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_prefer_braces = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = true:none
csharp_style_expression_bodied_constructors = true:none
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

csharp_style_namespace_declarations = file_scoped:error
dotnet_style_namespace_match_folder = true:error

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion


# Null checking preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#null_checking
csharp_style_throw_expression = true:none
csharp_style_conditional_delegate_call = true:suggestion


# Spacing options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#spacing

csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_cast = false
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#wrapping

csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false


# Language keywords instead of framework type names for type references
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#language_keywords
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Style - qualification options
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#this_and_me
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Modifier preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#normalize_modifiers
dotnet_style_require_accessibility_modifiers = always:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async
dotnet_style_readonly_field = true:warning


# Parentheses preferences
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#parentheses
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# only use var when it's obvious what the variable type is
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true:silent

# supported (?)
max_line_length = 120

# Naming Conventions
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization    = pascal_case

dotnet_naming_style.camel_case_style.capitalization     = camel_case

dotnet_naming_style.I_prefix_style.required_prefix      = I
dotnet_naming_style.I_prefix_style.capitalization       = pascal_case

dotnet_naming_style.T_prefix_style.required_prefix      = T
dotnet_naming_style.T_prefix_style.capitalization       = pascal_case

# Use PascalCase for readonly static fields
dotnet_naming_rule.readonly_fields_should_be_pascal_case.severity  = warning
dotnet_naming_rule.readonly_fields_should_be_pascal_case.symbols   = readonly_fields
dotnet_naming_rule.readonly_fields_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.readonly_fields.applicable_kinds             = field
dotnet_naming_symbols.readonly_fields.applicable_accessibilities   = protected,public
dotnet_naming_symbols.readonly_fields.required_modifiers           = readonly, static

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity  = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols   = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds             = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities   = *
dotnet_naming_symbols.constant_fields.required_modifiers           = const


# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity          = warning
dotnet_naming_rule.pascal_case_for_public_fields.symbols           = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style             = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds               = field
dotnet_naming_symbols.public_fields.applicable_accessibilities     = public


# Interfaces must be PascalCase and have an I prefix
dotnet_naming_rule.interfaces_start_with_I.severity                = warning
dotnet_naming_rule.interfaces_start_with_I.symbols                 = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                   = I_prefix_style
dotnet_naming_symbols.any_interface.applicable_accessibilities     = *
dotnet_naming_symbols.any_interface.applicable_kinds               = interface

# Classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                         = warning
dotnet_naming_rule.general_naming.symbols                          = general
dotnet_naming_rule.general_naming.style                            = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                     = class,struct,enum,property,method,event,namespace,delegate
dotnet_naming_symbols.general.applicable_accessibilities           = *

# Allow underscore for private static fields
dotnet_naming_rule.private_static_fields_with_underscore.symbols  = private_static_fields
dotnet_naming_rule.private_static_fields_with_underscore.style    = prefix_underscore
dotnet_naming_rule.private_static_fields_with_underscore.severity = silent
dotnet_naming_symbols.private_static_fields.applicable_kinds           = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers         = readonly, static

# Allow underscore for private fields
dotnet_naming_rule.private_fields_with_underscore.symbols  = private_fields
dotnet_naming_rule.private_fields_with_underscore.style    = prefix_underscore
dotnet_naming_rule.private_fields_with_underscore.severity = suggestion
dotnet_naming_symbols.private_fields.applicable_kinds           = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_style.prefix_underscore.capitalization = camel_case
dotnet_naming_style.prefix_underscore.required_prefix = _

# Type params must be PascalCase and have an T prefix
dotnet_naming_rule.typeparam_start_with_T.severity                = warning
dotnet_naming_rule.typeparam_start_with_T.symbols                 = any_typeparam
dotnet_naming_rule.typeparam_start_with_T.style                   = T_prefix_style
dotnet_naming_symbols.any_typeparam.applicable_accessibilities    = *
dotnet_naming_symbols.any_typeparam.applicable_kinds              = type_parameter

# Analyzer rulesets

# Security analyzers
dotnet_diagnostic.CA1716.severity = none # CA1716: Rename namespace Shared so that it no longer conflicts with the reserved language keyword 'Shared'
dotnet_diagnostic.CA5394.severity = none # CA5394: Random is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.

# CSharp analyzers
dotnet_diagnostic.CS0078.severity = error   # The 'l' suffix is easily confused with the digit 1
dotnet_diagnostic.CS0105.severity = error   # The using directive for 'namespace' appeared previously in this namespace
dotnet_diagnostic.CS0108.severity = error   # 'Member1' hides inherited member 'member2'. Use the new keyword if hiding was intended
dotnet_diagnostic.CS0109.severity = error   # The member does not hide an accessible member. The new keyword is not required.
dotnet_diagnostic.CS0164.severity = error   # This label has not been referenced
dotnet_diagnostic.CS0169.severity = error   # The private field 'class member' is never used
dotnet_diagnostic.CS0184.severity = error   # The given expression is never of the provided type
dotnet_diagnostic.CS0219.severity = error   # The variable 'variable' is assigned but its value is never used
dotnet_diagnostic.CS0436.severity = error   # The type conflicts with the imported type
dotnet_diagnostic.CS0464.severity = error   # Comparing with null of type 'type' always produces 'false'
dotnet_diagnostic.CS0472.severity = error   # The result of the expression is always 'value1' since a value of type 'value2' is never equal to 'null' of type 'value3'
dotnet_diagnostic.CS0628.severity = error   # new protected member declared in sealed type
dotnet_diagnostic.CS0659.severity = error   # class' overrides Object.Equals(object o) but does not override Object.GetHashCode()
dotnet_diagnostic.CS1633.severity = error   # Unrecognized #pragma directive
dotnet_diagnostic.CS1634.severity = error   # Expected disable or restore in #pragma warning
dotnet_diagnostic.CS1717.severity = error   # Assignment made to same variable
dotnet_diagnostic.CS1998.severity = error   # This async method lacks 'await'
dotnet_diagnostic.CS4014.severity = error   # Because this call is not awaited, execution of the current method continues before the call is completed
dotnet_diagnostic.CS8032.severity = error   # An instance of analyzer cannot be created
dotnet_diagnostic.CS8073.severity = error   # The result of the expression is always 'false' since a value of type is never equal to 'null'
dotnet_diagnostic.CS8601.severity = error   # Possible null reference assignment
dotnet_diagnostic.CS8714.severity = error   # The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'notnull' constraint.
dotnet_diagnostic.CS8785.severity = error   # Generator failed to generate source.
dotnet_diagnostic.CS9191.severity = error   # The 'ref' modifier for argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead

# Roslyn analyzers
dotnet_diagnostic.RCS1037.severity = warning # Remove trailing white-space

# VisualStudio.Threading analyzers (https://github.com/microsoft/vs-threading/tree/master/doc/analyzers)
dotnet_diagnostic.VSTHRD002.severity = error # Avoid problematic synchronous waits
dotnet_diagnostic.VSTHRD011.severity = error # Use AsyncLazy<T>
dotnet_diagnostic.VSTHRD100.severity = error # Avoid async void methods
dotnet_diagnostic.VSTHRD101.severity = error # Avoid unsupported async delegates
dotnet_diagnostic.VSTHRD103.severity = error # Call async methods when in an async method
dotnet_diagnostic.VSTHRD107.severity = error # Await Task within using expression
dotnet_diagnostic.VSTHRD110.severity = error # Observe result of async calls
dotnet_diagnostic.VSTHRD114.severity = error # Avoid returning a null Task
dotnet_diagnostic.VSTHRD200.severity = error # Use Async suffix for async methods

# Code-style analyzers
dotnet_diagnostic.IDE0005.severity = error   # Remove unnecessary import
dotnet_diagnostic.IDE0028.severity = warning # Use collection initializers or expressions
dotnet_diagnostic.IDE0055.severity = none    # Fix formatting
dotnet_diagnostic.IDE0130.severity = error   # Namespace does not match folder structure
dotnet_diagnostic.IDE0300.severity = warning # Use collection expression for array
dotnet_diagnostic.IDE0301.severity = warning # Use collection expression for empty
dotnet_diagnostic.IDE0302.severity = warning # Use collection expression for stackalloc
dotnet_diagnostic.IDE0303.severity = warning # Use collection expression for Create()
dotnet_diagnostic.IDE0304.severity = warning # Use collection expression for builder
dotnet_diagnostic.IDE0305.severity = warning # Use collection expression for fluent

# StyleCop analyzers
dotnet_diagnostic.SA0001.severity = none  # XML comment analysis is disabled due to project configuration
dotnet_diagnostic.SA1000.severity = none  # The keyword 'new' should be followed by a space
dotnet_diagnostic.SA1002.severity = none
dotnet_diagnostic.SA1003.severity = none
dotnet_diagnostic.SA1005.severity = none  # Single line comment should begin with a space
dotnet_diagnostic.SA1007.severity = none
dotnet_diagnostic.SA1008.severity = none
dotnet_diagnostic.SA1009.severity = none  # Closing parenthesis should not be preceded by a space
dotnet_diagnostic.SA1010.severity = none  # Opening square brackets should not be preceded by a space
dotnet_diagnostic.SA1011.severity = none  # A closing square bracket within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1012.severity = none  # Opening brace should be followed by a space
dotnet_diagnostic.SA1013.severity = none  # Closing brace should be preceded by a space
dotnet_diagnostic.SA1014.severity = none
dotnet_diagnostic.SA1015.severity = none  # Closing generic bracket should be followed by a space.
dotnet_diagnostic.SA1016.severity = none
dotnet_diagnostic.SA1017.severity = none
dotnet_diagnostic.SA1018.severity = none
dotnet_diagnostic.SA1019.severity = none
dotnet_diagnostic.SA1020.severity = none
dotnet_diagnostic.SA1021.severity = none
dotnet_diagnostic.SA1022.severity = none
dotnet_diagnostic.SA1023.severity = none
dotnet_diagnostic.SA1024.severity = none
dotnet_diagnostic.SA1025.severity = none
dotnet_diagnostic.SA1026.severity = none
dotnet_diagnostic.SA1027.severity = none
dotnet_diagnostic.SA1028.severity = error # Code must not contain Trailing Whitespace
dotnet_diagnostic.SA1101.severity = none  # Prefix local calls with this
dotnet_diagnostic.SA1102.severity = none  # Query clause should follow previous clause
dotnet_diagnostic.SA1103.severity = none
dotnet_diagnostic.SA1104.severity = none
dotnet_diagnostic.SA1105.severity = none
dotnet_diagnostic.SA1106.severity = none  # Code should not contain empty statements
dotnet_diagnostic.SA1107.severity = none
dotnet_diagnostic.SA1110.severity = none
dotnet_diagnostic.SA1111.severity = none  # Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1112.severity = none
dotnet_diagnostic.SA1113.severity = none
dotnet_diagnostic.SA1114.severity = none
dotnet_diagnostic.SA1115.severity = none  # Parameter should follow comma
dotnet_diagnostic.SA1116.severity = none  # The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines
dotnet_diagnostic.SA1117.severity = none  # The parameters should all be placed on the same line or each parameter should be placed on its own line
dotnet_diagnostic.SA1118.severity = none  # Parameter should not span multiple lines
dotnet_diagnostic.SA1119.severity = none  # Statement should not use unnecessary parenthesis
dotnet_diagnostic.SA1120.severity = none  # Comments should contain text
dotnet_diagnostic.SA1121.severity = none  # Use built-in type alias
dotnet_diagnostic.SA1122.severity = none  # Use string.Empty for empty strings
dotnet_diagnostic.SA1124.severity = none  # Do not use regions
dotnet_diagnostic.SA1127.severity = none  # Generic type constraints should be on their own line
dotnet_diagnostic.SA1128.severity = none  # Put constructor initializers on their own line
dotnet_diagnostic.SA1129.severity = none  # Do not use default value type constructor
dotnet_diagnostic.SA1131.severity = none  # Use readable conditions
dotnet_diagnostic.SA1133.severity = none  # Each attribute should be placed in its own set of square brackets
dotnet_diagnostic.SA1134.severity = none  # Each attribute should be placed on its own line of code
dotnet_diagnostic.SA1136.severity = none
dotnet_diagnostic.SA1137.severity = none
dotnet_diagnostic.SA1200.severity = none  # Using directive should appear within a namespace declaration
dotnet_diagnostic.SA1201.severity = none  # A constructor should not follow a property
dotnet_diagnostic.SA1202.severity = none  # 'public' members should come before 'protected' members
dotnet_diagnostic.SA1203.severity = none  # Constant fields should appear before non-constant fields
dotnet_diagnostic.SA1204.severity = none  # Static members should appear before non-static members
dotnet_diagnostic.SA1206.severity = none  # The 'required' modifier should appear before 'public'
dotnet_diagnostic.SA1210.severity = none  # Using directives should be ordered alphabetically by the namespaces
dotnet_diagnostic.SA1303.severity = none  # Const field names should begin with upper-case letter
dotnet_diagnostic.SA1304.severity = none  # The name of a non-private readonly C# field should being with an upper-case letter.
dotnet_diagnostic.SA1306.severity = none  # The name of a field in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1307.severity = none  # The name of a public or internal field in C# does not begin with an upper-case letter.
dotnet_diagnostic.SA1309.severity = none  # A field name in C# begins with an underscore.
dotnet_diagnostic.SA1310.severity = none  # Field names should not contain an underscore
dotnet_diagnostic.SA1311.severity = none  # Static readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1312.severity = none  # Variable names should begin with lower-case letter
dotnet_diagnostic.SA1313.severity = none  # Parameter names should begin with lower-case letter
dotnet_diagnostic.SA1314.severity = none  # Type parameter names should begin with T. Duplicates CA1715
dotnet_diagnostic.SA1316.severity = none  # Tuple element names should use correct casing
dotnet_diagnostic.SA1401.severity = none  # Fields should be private
dotnet_diagnostic.SA1402.severity = none  # File may only contain a single type
dotnet_diagnostic.SA1407.severity = none  # Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1408.severity = none  # Conditional expressions should declare precedence
dotnet_diagnostic.SA1413.severity = none  # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1414.severity = none  # Tuple types in signatures should have element names
dotnet_diagnostic.SA1500.severity = none  # Braces for multi-line statements should not share line
dotnet_diagnostic.SA1501.severity = none
dotnet_diagnostic.SA1502.severity = none  # Element should not be on a single line
dotnet_diagnostic.SA1503.severity = none  # Braces should not be omitted
dotnet_diagnostic.SA1504.severity = none
dotnet_diagnostic.SA1505.severity = none
dotnet_diagnostic.SA1506.severity = none
dotnet_diagnostic.SA1507.severity = none
dotnet_diagnostic.SA1508.severity = none  # A closing brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1509.severity = none
dotnet_diagnostic.SA1510.severity = none
dotnet_diagnostic.SA1511.severity = none
dotnet_diagnostic.SA1512.severity = none  # Single-line comments should not be followed by blank line
dotnet_diagnostic.SA1513.severity = none  # Closing brace should be followed by blank line
dotnet_diagnostic.SA1514.severity = none  # Element documentation header should be preceded by blank line
dotnet_diagnostic.SA1515.severity = none  # Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1516.severity = none  # Elements should be separated by blank line
dotnet_diagnostic.SA1517.severity = none
dotnet_diagnostic.SA1518.severity = none
dotnet_diagnostic.SA1600.severity = none  # Elements should be documented
dotnet_diagnostic.SA1601.severity = none  # Partial elements should be documented
dotnet_diagnostic.SA1602.severity = none  # Enumeration items should be documented
dotnet_diagnostic.SA1611.severity = none  # The documentation for parameter is missing
dotnet_diagnostic.SA1618.severity = none  # The documentation for type parameter is missing
dotnet_diagnostic.SA1615.severity = none  # Element return value should be documented
dotnet_diagnostic.SA1623.severity = none  # The property's documentation summary text should begin with: 'Gets or sets'
dotnet_diagnostic.SA1629.severity = none  # Documentation text should end with a period
dotnet_diagnostic.SA1633.severity = none  # The file header is missing or not located at the top of the file
dotnet_diagnostic.SA1649.severity = none  # File name should match first type name

# xUnit analyzers
dotnet_diagnostic.xUnit1004.severity = none # Test methods should not be skipped
dotnet_diagnostic.xUnit1026.severity = none # Theory methods should use all of their parameters
